name: verify version first
on: 
  release:
    types: [published]

jobs:
  update_major_version_tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get current major version
        id: get_major_v
        run: |
          set -e
          release_tag="${GITHUB_REF##*/}" ## same as ${GITHUB_REF_NAME}
          if [[ "$release_tag" =~ ^v([[:digit:]]+)\.([[:digit:]]+)\.([[:digit:]]+)-?([[:alnum:]]+)?$ ]]; then
            echo current_major_version=${BASH_REMATCH[1]} | tee $GITHUB_OUTPUT
            echo minor=${BASH_REMATCH[2]}
            echo patch=${BASH_REMATCH[3]}
            echo pre=${BASH_REMATCH[4]} | tee $GITHUB_OUTPUT
            # if [ -n $pre ]; then
            #   echo "This is a patch version, no need to update the major version. Exiting gracefully. "
            #   exit 0
            # else
            #   echo patch is empty. We are going further.
            # fi
          else
            echo "Error: version does not match pattern. please make sure that a release version follows the format 'v*.*.*', optionally followed by a patch note. "
            exit 1
          fi
      - name: Update major version
        # if: steps.get_major_v.outputs.pre == ''
        run: |
          set -e
          echo "current_major_version: ${{ steps.get_major_v.outputs.current_major_version }}"
          echo $v_major_version
          git push origin :refs/tags/$v_major_version
          git tag $v_major_version $GITHUB_SHA
          git push origin $v_major_version
          echo "Attached tag $v_major_version to commit $GITHUB_SHA."
        env:
          v_major_version: v${{ steps.get_major_v.outputs.current_major_version }}
      - name: Pre. No update
        if: steps.get_major_v.outputs.pre != ''
        run:
          echo "This is a pre release, no need to update the major version. "


